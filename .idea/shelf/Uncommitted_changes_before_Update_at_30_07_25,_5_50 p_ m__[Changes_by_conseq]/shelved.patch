Index: src/main/java/org/example/eiscuno/model/common/GameHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.eiscuno.model.common;\n\nimport javafx.application.Platform;\nimport org.example.eiscuno.model.card.Card;\nimport org.example.eiscuno.model.deck.Deck;\nimport org.example.eiscuno.model.player.Player;\nimport org.example.eiscuno.model.table.Table;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class GameHandler implements Serializable {\n\n    private final Player humanPlayer;\n    private final Player machinePlayer;\n    private final Deck deck;\n    private final Table table;\n\n    private boolean iaSaidUno;\n    private boolean isHumanTurn;\n    private boolean humanSaidUno;\n    private boolean gameEnded;\n\n    private transient ColorChooser colorChooser;\n\n    public GameHandler(Player human, Player machine, Deck deck, Table table,\n                       boolean iaSaidUno, boolean isHumanTurn, boolean humanSaidUno) {\n        this.humanPlayer = human;\n        this.machinePlayer = machine;\n        this.deck = deck;\n        this.table = table;\n        this.iaSaidUno = iaSaidUno;\n        this.isHumanTurn = isHumanTurn;\n        this.humanSaidUno = humanSaidUno;\n        this.gameEnded = false;\n    }\n\n    public static GameHandler createNewGame() {\n        Player human = new Player(\"HUMAN_PLAYER\");\n        Player machine = new Player(\"MACHINE_PLAYER\");\n        Deck deck = new Deck();\n        Table table = new Table();\n        GameHandler handler = new GameHandler(human, machine, deck, table, false, true, false);\n        handler.startGame();\n        return handler;\n    }\n\n    public void startGame() {\n        for (int i = 0; i < 10; i++) {\n            if (i < 5) {\n                humanPlayer.addCard(deck.takeCard());\n            } else {\n                machinePlayer.addCard(deck.takeCard());\n            }\n        } //Sexo anal\n\n        // Seleccionar carta inicial que no sea especial\n        Card initialCard;\n        do {\n            initialCard = deck.takeCard();\n        } while (initialCard.isSpecial());\n        table.addCardOnTheTable(initialCard);\n    }\n\n    public void eatCard(Player player, int numberOfCards) {\n        for (int i = 0; i < numberOfCards; i++) {\n            try {\n                player.addCard(deck.takeCard());\n            } catch (IllegalStateException e) {\n                // Si el mazo está vacío, lo rellenamos con las cartas en uso\n                List<Card> inUse = new ArrayList<>();\n                inUse.addAll(humanPlayer.getCardsPlayer());\n                inUse.addAll(machinePlayer.getCardsPlayer());\n                deck.refillDeck(inUse);\n                player.addCard(deck.takeCard());\n            }\n        }\n    }\n\n    public void haveSungUno(String playerWhoSang) {\n        if (\"HUMAN_PLAYER\".equals(playerWhoSang)) {\n            machinePlayer.addCard(deck.takeCard());\n        } else {\n            humanPlayer.addCard(deck.takeCard());\n        }\n    }\n\n    public boolean handleHumanCardClick(Card card, Runnable onFinish) {\n        if (!isHumanTurn) {\n            return false; // para que el controlador sepa si fue un movimiento válido\n        }\n\n        if (!card.canBePlayedOn(getCurrentCardOnTable())) {\n            return false;\n        }\n\n        playCard(humanPlayer, card);\n        PlayerStatsManager.updateStats(false, 1, true);\n\n        applySpecialCardEffect(card, true);\n\n        checkWinner();\n\n        // Verificar UNO\n        if (humanPlayer.getCardsPlayer().size() == 1 && !humanSaidUno) {\n            // lanzar temporizador si no dijo UNO\n            new Thread(() -> {\n                try {\n                    Thread.sleep(3000);\n                    if (!humanSaidUno && humanPlayer.getCardsPlayer().size() == 1) {\n                        eatCard(humanPlayer, 1);\n                    }\n                } catch (InterruptedException ignored) {}\n            }).start();\n        }\n\n        if (!card.isSkipOrReverse() && !card.isPlusTwo() && !card.isPlusFour()) {\n            // Si no es una carta especial, pasamos el turno a la máquina\n            passTurnToMachine();\n        }\n\n        if (onFinish != null) {\n            Platform.runLater(onFinish);\n        }\n\n        return true;\n    }\n\n    public Card[] getCurrentVisibleCardsHumanPlayer(int posInitCardToShow) {\n        int totalCards = humanPlayer.getCardsPlayer().size();\n        int numVisibleCards = Math.min(4, totalCards - posInitCardToShow);\n        Card[] cards = new Card[numVisibleCards];\n        for (int i = 0; i < numVisibleCards; i++) {\n            cards[i] = humanPlayer.getCard(posInitCardToShow + i);\n        }\n        return cards;\n    }\n\n    public boolean hasPlayableCard(Player player) {\n        Card topCard = table.getCurrentCardOnTheTable();\n        for (Card card : player.getCardsPlayer()) {\n            if (card.canBePlayedOn(topCard)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void playCard(Player player, Card card) {\n        table.addCardOnTheTable(card);\n        player.getCardsPlayer().remove(card);\n    }\n\n    public void applySpecialCardEffect(Card card, boolean playedByHuman) {\n        if (card.isPlusTwo()) {\n            if (playedByHuman) {\n                machinePlayer.addCards(deck.takeCards(2));\n            } else {\n                humanPlayer.addCards(deck.takeCards(2));\n            }\n        } else if (card.isPlusFour() || card.isWildCard()) {\n            String newColor = \"RED\"; // por defecto\n\n            if (playedByHuman && colorChooser != null) {\n                newColor = colorChooser.chooseColor(); // popup si es humano\n            } else {\n                // color aleatorio para IA\n                String[] colors = {\"RED\", \"GREEN\", \"BLUE\", \"YELLOW\"};\n                newColor = colors[new Random().nextInt(colors.length)];\n            }\n\n            card.setColor(newColor);\n        }\n\n        if (card.isSkipOrReverse() || card.isPlusTwo() || card.isPlusFour()) {\n            // El jugador que juega se queda con el turno (reverse/skip/PlusSomething)\n            isHumanTurn = playedByHuman;\n        }\n    }\n\n    public void setColorChooser(ColorChooser colorChooser) {\n        this.colorChooser = colorChooser;\n    }\n\n    public void checkWinner() {\n        if (humanPlayer.getCardsPlayer().isEmpty() || machinePlayer.getCardsPlayer().isEmpty()) {\n            gameEnded = true;\n        }\n    }\n\n    public Card getCurrentCardOnTable() {\n        return table.getCurrentCardOnTheTable();\n    }\n\n    public Player getHumanPlayer() {\n        return humanPlayer;\n    }\n\n    public Player getMachinePlayer() {\n        return machinePlayer;\n    }\n\n    public Deck getDeck() {\n        return deck;\n    }\n\n    public Table getTable() {\n        return table;\n    }\n\n    public boolean getIASaidUno() {\n        return iaSaidUno;\n    }\n\n    public void setIASaidUno(boolean iaSaidUno) {\n        this.iaSaidUno = iaSaidUno;\n    }\n\n    public boolean getHumanSaidUno() {\n        return humanSaidUno;\n    }\n\n    public void setHumanSaidUno(boolean humanSaidUno) {\n        this.humanSaidUno = humanSaidUno;\n    }\n\n    public boolean getHumanTurn() {\n        return isHumanTurn;\n    }\n\n    public void passTurnToHuman() {\n        isHumanTurn = true;\n    }\n\n    public void passTurnToMachine() {\n        isHumanTurn = false;\n    }\n\n    public boolean isGameEnded() {\n        return gameEnded;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/eiscuno/model/common/GameHandler.java b/src/main/java/org/example/eiscuno/model/common/GameHandler.java
--- a/src/main/java/org/example/eiscuno/model/common/GameHandler.java	(revision 115047cfab4e41fbc71be3725f242cf89179b1af)
+++ b/src/main/java/org/example/eiscuno/model/common/GameHandler.java	(date 1753915487019)
@@ -99,7 +99,7 @@
         playCard(humanPlayer, card);
         PlayerStatsManager.updateStats(false, 1, true);
 
-        applySpecialCardEffect(card, true);
+        applyCardEffectAndTurn(card, true);
 
         checkWinner();
 
@@ -153,7 +153,7 @@
         player.getCardsPlayer().remove(card);
     }
 
-    public void applySpecialCardEffect(Card card, boolean playedByHuman) {
+    public void applyCardEffectAndTurn(Card card, boolean playedByHuman) {
         if (card.isPlusTwo()) {
             if (playedByHuman) {
                 machinePlayer.addCards(deck.takeCards(2));
@@ -177,6 +177,8 @@
         if (card.isSkipOrReverse() || card.isPlusTwo() || card.isPlusFour()) {
             // El jugador que juega se queda con el turno (reverse/skip/PlusSomething)
             isHumanTurn = playedByHuman;
+        } else {
+            isHumanTurn = !playedByHuman;
         }
     }
 
Index: src/main/java/org/example/eiscuno/model/machine/ThreadPlayMachine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.eiscuno.model.machine;\n\nimport javafx.application.Platform;\nimport javafx.scene.control.Alert;\nimport javafx.scene.image.ImageView;\nimport org.example.eiscuno.model.card.Card;\nimport org.example.eiscuno.model.common.GameHandler;\nimport org.example.eiscuno.model.common.GamePauseManager;\nimport org.example.eiscuno.model.player.Player;\nimport org.example.eiscuno.model.table.Table;\nimport org.example.eiscuno.model.deck.Deck;\n\nimport java.util.Random;\n\npublic class ThreadPlayMachine extends Thread {\n    private final GameHandler gameHandler;\n    private final ImageView tableImageView;\n    private volatile boolean running = true;\n\n    public ThreadPlayMachine(GameHandler gameHandler, ImageView tableImageView) {\n        this.gameHandler = gameHandler;\n        this.tableImageView = tableImageView;\n    }\n\n    @Override\n    public void run() {\n        while (running) {\n            GamePauseManager.getInstance().waitIfPaused(); //Se pausa si hay algun dialog corriendo que haya que esperar\n            if (!running || gameHandler.isGameEnded()) break; //Deja de correr si el running es false o si el juego ha terminado\n\n            if (!gameHandler.getHumanTurn()) { // Si no es el turno del humano, ejecutamos su ciclo de juego\n                handleMachineTurn();\n            }\n        }\n    }\n\n    private void handleMachineTurn() {\n        sleepSafely(1500);\n        GamePauseManager.getInstance().waitIfPaused();\n\n        Card topCard = gameHandler.getCurrentCardOnTable();\n        Card cardToPlay = findPlayableCard(topCard);\n\n        if (cardToPlay != null) {\n            playCard(cardToPlay);\n\n            if (gameHandler.getMachinePlayer().getCardsPlayer().size() == 1 && !gameHandler.getIASaidUno()) {\n                handleMachineUno();\n            }\n\n            gameHandler.checkWinner();\n            // El cambio de turno ya lo hace GameHandler.applySpecialCardEffect()\n        } else {\n            Card drawn = gameHandler.getDeck().takeCard();\n            gameHandler.getMachinePlayer().addCard(drawn);\n\n            if (drawn.canBePlayedOn(topCard)) {\n                playCard(drawn);\n            } else {\n                gameHandler.passTurnToHuman(); // Ya no hay carta jugable\n            }\n        }\n    }\n\n    private Card findPlayableCard(Card topCard) {\n        for (Card card : gameHandler.getMachinePlayer().getCardsPlayer()) {\n            if (card.canBePlayedOn(topCard)) {\n                return card;\n            }\n        }\n        return null;\n    }\n\n    private void playCard(Card card) {\n        GamePauseManager.getInstance().waitIfPaused();\n\n        gameHandler.playCard(gameHandler.getMachinePlayer(), card);\n        gameHandler.applySpecialCardEffect(card, false);\n\n        Platform.runLater(() -> {\n            tableImageView.setImage(card.getImage());\n\n            if (card.isPlusTwo() || card.isPlusFour()) {\n                gameHandler.getHumanPlayer().getCardsPlayer().forEach(Card::restoreVisuals);\n            }\n        });\n    }\n\n    private void handleMachineUno() {\n        new Thread(() -> {\n            sleepSafely(2000 + new Random().nextInt(2000));\n            GamePauseManager.getInstance().waitIfPaused();\n\n            Platform.runLater(() -> {\n                if (!gameHandler.getHumanSaidUno()) {\n                    gameHandler.setIASaidUno(true);\n                    GamePauseManager.getInstance().pauseGame();\n\n                    Alert alert = new Alert(Alert.AlertType.INFORMATION);\n                    alert.setTitle(\"¡UNO!\");\n                    alert.setHeaderText(null);\n                    alert.setContentText(\"La máquina ha gritado ¡UNO!\");\n                    alert.setOnHidden(e -> GamePauseManager.getInstance().resumeGame());\n                    alert.showAndWait();\n                }\n            });\n        }).start();\n    }\n\n    private void sleepSafely(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException ignored) {}\n    }\n\n    public void stopThread() {\n        running = false;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/eiscuno/model/machine/ThreadPlayMachine.java b/src/main/java/org/example/eiscuno/model/machine/ThreadPlayMachine.java
--- a/src/main/java/org/example/eiscuno/model/machine/ThreadPlayMachine.java	(revision 115047cfab4e41fbc71be3725f242cf89179b1af)
+++ b/src/main/java/org/example/eiscuno/model/machine/ThreadPlayMachine.java	(date 1753915487010)
@@ -6,9 +6,6 @@
 import org.example.eiscuno.model.card.Card;
 import org.example.eiscuno.model.common.GameHandler;
 import org.example.eiscuno.model.common.GamePauseManager;
-import org.example.eiscuno.model.player.Player;
-import org.example.eiscuno.model.table.Table;
-import org.example.eiscuno.model.deck.Deck;
 
 import java.util.Random;
 
@@ -75,7 +72,7 @@
         GamePauseManager.getInstance().waitIfPaused();
 
         gameHandler.playCard(gameHandler.getMachinePlayer(), card);
-        gameHandler.applySpecialCardEffect(card, false);
+        gameHandler.applyCardEffectAndTurn(card, false);
 
         Platform.runLater(() -> {
             tableImageView.setImage(card.getImage());
